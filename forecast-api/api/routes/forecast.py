"""
Rutas de API para Pron√≥stico
"""
from fastapi import APIRouter, Depends, HTTPException, status
from typing import Union

from models.schemas import (
    ForecastDynamicRequest,
    ForecastMonitoreoResponse,
    ForecastProyeccionResponse
)
from services.forecast_service import ForecastService
from repositories.data_repository import DataRepository
from api.dependencies import (
    get_forecast_service,
    get_data_repository,
    get_validated_year
)
from utils.logger import logger
from utils.exceptions import ForecastException, InsufficientDataException


router = APIRouter(prefix="/forecast", tags=["Pron√≥stico"])


@router.post(
    "/dynamic/",
    response_model=Union[ForecastMonitoreoResponse, ForecastProyeccionResponse],
    summary="Pron√≥stico Din√°mico (Monitoreo o Proyecci√≥n)",
    description="""
    **Endpoint principal para pron√≥stico y monitoreo presupuestal.**
    
    **Modos de operaci√≥n:**
    - **Monitoreo (a√±o actual ‚â§ 2025)**: Compara gasto real acumulado vs predicci√≥n inicial
    - **Proyecci√≥n (a√±o futuro > 2025)**: Predice gasto total del a√±o futuro
    
    **Funcionalidades:**
    - Pron√≥stico de gasto total anual
    - Distribuci√≥n mensual
    - Desglose por dimensiones (ORIGEN, UN, CATEGORIA, etc.)
    - Comparaci√≥n con presupuesto asignado
    - Alertas autom√°ticas de desviaciones
    - Intervalos de confianza
    """
)
async def forecast_dynamic(
    request: ForecastDynamicRequest,
    forecast_service: ForecastService = Depends(get_forecast_service),
    data_repo: DataRepository = Depends(get_data_repository)
):
    """
    Ejecuta pron√≥stico din√°mico seg√∫n el a√±o objetivo
    
    - **anio_objetivo**: A√±o a analizar (2025 para monitoreo, 2026+ para proyecci√≥n)
    - **presupuesto_asignado**: Presupuesto opcional para comparaci√≥n
    - **dimensiones**: Dimensiones para desglose (ORIGEN, UN, CATEGORIA, etc.)
    - **incluir_intervalos_confianza**: Si incluir intervalos de confianza
    """
    try:
        logger.info(
            f"üöÄ Iniciando pron√≥stico din√°mico para a√±o {request.anio_objetivo}"
        )
        
        # Validar a√±o
        anio = get_validated_year(request.anio_objetivo)
        
        # Obtener datos hist√≥ricos (√∫ltimos 5 a√±os + a√±o objetivo)
        anio_inicio = max(2016, anio - 5)
        anio_fin = anio
        
        logger.info(f"üì• Obteniendo datos desde {anio_inicio} hasta {anio_fin}")
        df = data_repo.get_compras_rango_a√±os(anio_inicio, anio_fin)
        
        if len(df) == 0:
            raise InsufficientDataException(
                f"No hay datos disponibles para el rango {anio_inicio}-{anio_fin}"
            )
        
        # Ejecutar pron√≥stico
        resultado = forecast_service.forecast_dynamic(
            df=df,
            anio_objetivo=anio,
            presupuesto_asignado=request.presupuesto_asignado,
            dimensiones=request.dimensiones,
            incluir_intervalos_confianza=request.incluir_intervalos_confianza
        )
        
        logger.info(
            f"‚úÖ Pron√≥stico completado para a√±o {anio} "
            f"(Modo: {resultado.modo.value})"
        )
        
        return resultado
        
    except InsufficientDataException as e:
        logger.error(f"‚ùå Datos insuficientes: {e}")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )
    
    except ForecastException as e:
        logger.error(f"‚ùå Error en pron√≥stico: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )
    
    except Exception as e:
        logger.error(f"‚ùå Error inesperado: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error interno del servidor: {str(e)}"
        )


@router.get(
    "/year/{anio}",
    summary="Obtener pron√≥stico para un a√±o espec√≠fico",
    description="Atajo para obtener pron√≥stico de un a√±o sin body complejo"
)
async def forecast_year(
    anio: int,
    presupuesto: float = None,
    forecast_service: ForecastService = Depends(get_forecast_service),
    data_repo: DataRepository = Depends(get_data_repository)
):
    """
    Obtiene pron√≥stico para un a√±o espec√≠fico (versi√≥n simplificada)
    
    - **anio**: A√±o objetivo
    - **presupuesto**: Presupuesto opcional
    """
    try:
        # Validar a√±o
        anio = get_validated_year(anio)
        
        # Obtener datos
        anio_inicio = max(2016, anio - 5)
        df = data_repo.get_compras_rango_a√±os(anio_inicio, anio)
        
        if len(df) == 0:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"No hay datos disponibles para el a√±o {anio}"
            )
        
        # Ejecutar pron√≥stico con configuraci√≥n por defecto
        resultado = forecast_service.forecast_dynamic(
            df=df,
            anio_objetivo=anio,
            presupuesto_asignado=presupuesto,
            dimensiones=[],
            incluir_intervalos_confianza=True
        )
        
        return resultado
        
    except Exception as e:
        logger.error(f"‚ùå Error: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )